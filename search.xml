<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/01/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Symbol 关键字</title>
    <url>/2022/01/14/My-New-Post/</url>
    <content><![CDATA[<h3 id="ES6新增数据类型"><a href="#ES6新增数据类型" class="headerlink" title="ES6新增数据类型"></a>ES6新增数据类型</h3><p>ES6 引入了一种新的原始数据类型 Symbol ，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是： undefined 、 null 、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。<span id="more"></span><br>Symbol 值通过Symbol函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> s = Symbol();</span><br><span class="line">typeof s</span><br><span class="line">// <span class="string">&quot;symbol</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，变量 s 就是一个独一无二的值。 typeof 运算符的结果，表明变量 s 是 Symbol 数据类型，而不是字符串之类的其他类型。</p>
]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>前端工具</tag>
      </tags>
  </entry>
  <entry>
    <title>为对象手动添加迭代器（iterator）</title>
    <url>/2022/04/14/obj-iterator/</url>
    <content><![CDATA[<p>当你想用let…of..去遍历对象的属性时，会报出<lab style="color:red"> obj is not iterable </lab>的错误，这是因为对象中没有迭代器对应的方法，这就可以自己通过定义Symbol.iterator来进行遍历，遍历的代码如下：<span id="more"></span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const obj = &#123;</span><br><span class="line">  name: 11,</span><br><span class="line">  father: 12,</span><br><span class="line">  mother: 13,</span><br><span class="line">  [Symbol.iterator]() &#123;</span><br><span class="line">    <span class="built_in">let</span> index = 0;</span><br><span class="line">    <span class="built_in">let</span> arr = Object.keys(obj);</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      next: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; arr.length) &#123;</span><br><span class="line">          <span class="built_in">let</span> result = &#123; value: obj[arr[index]], <span class="keyword">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">          index++;</span><br><span class="line">          <span class="built_in">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">return</span> &#123; value: undefined, <span class="keyword">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> i of obj) &#123;</span><br><span class="line">  console.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就能够直接遍历得到对象的属性值了。</p>
]]></content>
      <categories>
        <category>es6</category>
      </categories>
      <tags>
        <tag>前端工具</tag>
      </tags>
  </entry>
</search>
